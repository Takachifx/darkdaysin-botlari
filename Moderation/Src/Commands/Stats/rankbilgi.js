const settings = require("../../../../Src/Settings/Settings.json")
const setups = require("../../../../Src/Schemas/Setup")
const emojis = require("../../../../Src/Settings/emojiName.json")
const Users = require("../../../../Src/Schemas/UsersDB")
const RankSystem = require("../../../../Src/Schemas/RankSystem");
const Discord = require("discord.js");
const moment = require("moment");
require("moment-duration-format");
moment.locale("tr")
const regstats = require("../../../../Src/Schemas/RegisterStaffStats");
const messageUser = require("../../../../Src/Schemas/MessageUsers");
const voiceUser = require("../../../../Src/Schemas/VoiceUsers");
const cameraUser = require("../../../../Src/Schemas/CameraUsers");
const streamUser = require("../../../../Src/Schemas/StreamUsers");
const inviterSchema = require("../../../../Src/Schemas/Ä°nvited");
module.exports = {
conf: {
aliases: ["rankbilgi", "puanbilgi"],
name: "rankbilgi",
help: "rankbilgi",
category: "yetkili"
},
Cyrstal: async (client, message, args, embed, prefix) => {
const ayar = await setups.findOne({guildID: settings.Moderation.guildID})
if(!ayar) return;
const rdata = await RankSystem.findOne({guildID: message.guild.id})
if(!rdata) return;
if(rdata.RankSystem == false) return await message.react(message.guild.emojiGÃ¶ster(emojis.no))
const member = message.mentions.members.first() || message.guild.members.cache.get(args[0]) || message.member;
const ranks = JSON.parse(await client.ranks(message.guild.id));
if(!ranks.map(x => x.roleID).some(x => message.member.roles.cache.has(x)) && !message.member.permissions.has(Discord.PermissionFlagsBits.Administrator)) {
await message.react(message.guild.emojiGÃ¶ster(emojis.no))
return message.reply({embeds: [embed.setDescription(`Bu komutu kullanabilmek iÃ§in yeterli yetkiye sahip deÄŸilsin!`)]}).sil(15)
}
if(!member) {
await message.react(message.guild.emojiGÃ¶ster(emojis.no))
return message.reply({embeds: [embed.setDescription(`Bir Ã¼ye belirtmelisin!`)]}).sil(15)
}
if(!ranks.map(x => x.roleID).some(x => member.roles.cache.has(x)) && !member.permissions.has(Discord.PermissionFlagsBits.Administrator)) {
await message.react(message.guild.emojiGÃ¶ster(emojis.no))
return message.reply({embeds: [embed.setDescription(`BelirttiÄŸin Ã¼ye yetkili deÄŸil!`)]}).sil(15)
}
const messageData = await messageUser.findOne({ guildID: settings.Moderation.guildID, userID: member.user.id });
const voiceData = await voiceUser.findOne({ guildID: settings.Moderation.guildID, userID: member.user.id });
const streamData = await streamUser.findOne({ guildID: settings.Moderation.guildID, userID: member.user.id });
const cameraData = await cameraUser.findOne({ guildID: settings.Moderation.guildID, userID: member.user.id });
const inviterData = await inviterSchema.findOne({ guildID: settings.Moderation.guildIDd, userID: member.user.id });
const registerData = await regstats.findOne({ guildID: settings.Moderation.guildID, userID: member.user.id });

const mesaj = rdata.messageCoin * (messageData ? messageData.topStat : 0) / rdata.messageCount
const ses = rdata.voiceCoin * (await voiceMS(voiceData ? voiceData.topStat : 0)) / rdata.voiceCount
const yayin = rdata.streamCoin * (await voiceMS(streamData ? streamData.topStat : 0)) / rdata.streamCount
const kamera = rdata.cameraCoin * (await voiceMS(cameraData ? cameraData.topStat : 0)) / rdata.cameraCount
const kayit = rdata.registerCoin * (registerData ? registerData.top : 0) / 1
const davet = rdata.inviteCoin * (inviterData ? inviterData.total : 0) / 1
const tagli = rdata.tagCoin * (await TaggedsDB(member.id)) / 1
const yetkili = rdata.staffCoin * (await StaffsDB(member.id)) / 1

var puanbilgilendirme = new Discord.EmbedBuilder()
.setDescription(`${message.guild.emojiGÃ¶ster(emojis.info)} SayÄ±n yetkililerimiz sizlere Ã¶zel olarak tasarlanmÄ±s olan **puan sistemi** hakkÄ±nda bu panelden bilgi alabilirsiniz Mesaj, Ses , Kamera , YayÄ±n gibi aktivitelerinizin size kaÃ§ puan ve coin ekleyeceÄŸini buradan gÃ¶rebilirsiniz.

\`\`\`fix
ðŸª™                Puan Sistemi
\`\`\`
${message.guild.emojiGÃ¶ster(emojis.nokta)} \`  Mesaj PuanÄ±:  \` **${mesaj.toFixed()} Puan** (**${messageData ? messageData.topStat : 0} Mesaj.**)
${message.guild.emojiGÃ¶ster(emojis.nokta)} \`  Ses PuanÄ±:  \` **${ses.toFixed()} Puan** (**${moment.duration(voiceData ? voiceData.topStat : 0).format("D [GÃ¼n], H [Saat], m [Dakika]")}**)
${message.guild.emojiGÃ¶ster(emojis.nokta)} \`  YayÄ±n PuanÄ±:  \` **${yayin.toFixed()} Puan** (**${moment.duration(streamData ? streamData.topStat : 0).format("D [GÃ¼n], H [Saat], m [Dakika]")}**)
${message.guild.emojiGÃ¶ster(emojis.nokta)} \`  Kamera PuanÄ±:  \` **${kamera.toFixed()} Puan** (**${moment.duration(cameraData ? cameraData.topStat : 0).format("D [GÃ¼n], H [Saat], m [Dakika]")}**)
${message.guild.emojiGÃ¶ster(emojis.nokta)} \`  KayÄ±t PuanÄ±:  \` **${kayit.toFixed()} Puan** (**${registerData ? registerData.top : 0} KayÄ±t.**)
${message.guild.emojiGÃ¶ster(emojis.nokta)} \`  Davet PuanÄ±:  \` **${davet.toFixed()} Puan** (**${inviterData ? inviterData.total : 0} Davet.**)
${message.guild.emojiGÃ¶ster(emojis.nokta)} \`  TaglÄ± PuanÄ±:  \` **${tagli.toFixed()} Puan** (**${(await TaggedsDB(member.user.id)) || 0} TaglÄ±.**)
${message.guild.emojiGÃ¶ster(emojis.nokta)} \`  Yetkili PuanÄ±:  \` **${yetkili.toFixed()} Puan** (**${(await StaffsDB(member.user.id)) || 0} Yetkili.**)

\`\`\`fix
âš™              Puan AyarlarÄ±
\`\`\`
${message.guild.emojiGÃ¶ster(emojis.nokta)} \`  Mesaj Puan AyarÄ±: \` Mesaj sayÄ±nÄ±z **${rdata.messageCoin}** ile Ã§arpÄ±lÄ±p **${rdata.messageCount}**'e bÃ¶lÃ¼nÃ¼r bunun sonucunda **mesaj** puanÄ±nÄ±z **${mesaj.toFixed()}**.
${message.guild.emojiGÃ¶ster(emojis.nokta)} \`  Ses Puan AyarÄ±: \` Ses sÃ¼reniz **${rdata.voiceCoin}** ile Ã§arpÄ±lÄ±p **${rdata.voiceCount}**' e bÃ¶lÃ¼nÃ¼r bunun sonucunda **ses** puanÄ±nÄ±z **${ses.toFixed()}**.
${message.guild.emojiGÃ¶ster(emojis.nokta)} \`  YayÄ±n Puan AyarÄ±: \` YayÄ±n sÃ¼reniz **${rdata.streamCoin}** ile Ã§arpÄ±lÄ±p **${rdata.streamCount}**' e bÃ¶lÃ¼nÃ¼r bunun sonucunda **yayÄ±n** puanÄ±nÄ±z **${yayin.toFixed()}**.
${message.guild.emojiGÃ¶ster(emojis.nokta)} \`  Kamera Puan AyarÄ±: \` Kamera aÃ§ma sÃ¼reniz **${rdata.cameraCoin}** ile Ã§arpÄ±lÄ±p **${rdata.cameraCount}**' e bÃ¶lÃ¼nÃ¼r bunun sonucunda **kamera** puanÄ±nÄ±z **${kamera.toFixed()}**.
${message.guild.emojiGÃ¶ster(emojis.nokta)} \`  KayÄ±t Puan AyarÄ±: \` KayÄ±t sayÄ±nÄ±z **${rdata.registerCoin}** ile Ã§arpÄ±lÄ±p **${rdata.registerCount}** e bÃ¶lÃ¼nÃ¼r bunun sonucunda **kayÄ±t** puanÄ±nÄ±z **${kayit.toFixed()}**.
${message.guild.emojiGÃ¶ster(emojis.nokta)} \`  Davet Puan AyarÄ±: \` Davet ettiÄŸiniz kiÅŸi sayÄ±sÄ±nÄ±z **${rdata.inviteCoin}** ile Ã§arpÄ±lÄ±p **${rdata.inviteCount}**' e bÃ¶lÃ¼nÃ¼r bunun sonucunda **davet** puanÄ±nÄ±z **${davet.toFixed()}**.
${message.guild.emojiGÃ¶ster(emojis.nokta)} \`  TaglÄ± Puan AyarÄ±: \` TaglÄ± kiÅŸi sayÄ±nÄ±z **${rdata.tagCoin}** ile Ã§arpÄ±lÄ±p **${rdata.tagCount}**' e bÃ¶lÃ¼nÃ¼r bunun sonucunda **taglÄ±** puanÄ±nÄ±z **${tagli.toFixed()}**.
${message.guild.emojiGÃ¶ster(emojis.nokta)} \`  Yetkili Puan AyarÄ±: \` Yetkili Ã§ektiÄŸiniz kiÅŸi sayÄ±sÄ± **${rdata.staffCoin}** ile Ã§arpÄ±lÄ±p **${rdata.staffCount}** e bÃ¶lÃ¼nÃ¼r bunun sonucunda **yetkili** puanÄ±nÄ±z **${yetkili.toFixed()}**.`)
.setImage(member.user.bannerURL({ dynamic: true, size: 2048 }))
.setFooter({ text: `Ã‡arpÄ±lan ve bÃ¶lÃ¼nen puan sayÄ±larÄ±nÄ±z sunucu sahibi tarafÄ±ndan ayarlanmÄ±ÅŸtÄ±r.`, iconURL: message.guild.iconURL({ dynamic: true, size: 1024 }) })
.setThumbnail(member.user.avatarURL({ dynamic: true, size: 2048 }))
.setTimestamp();
await message.react(message.guild.emojiGÃ¶ster(emojis.yes))
await message.reply({ embeds: [puanbilgilendirme] })
}
}
async function voiceMS(type) {
const dakika = type / (1000 * 60);
return dakika;
}
async function TaggedsDB(user) {
 try {
     const res = await Users.findOne({ _id: user });
     if (!res) {
         return 0;
     } else {
         return res.Taggeds && res.Taggeds.length > 0 ? res.Taggeds.length : 0;
     }
 } catch (err) {
     throw err;
 }
}


async function StaffsDB(user) {
 try {
     const res = await Users.findOne({ _id: user });
     if (!res) {
         return 0;
     } else {
         return res.Staffs && res.Staffs.length > 0 ? res.Staffs.length : 0;
     }
 } catch (err) {
     throw err;
 }
}
